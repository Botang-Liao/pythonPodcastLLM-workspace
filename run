#!/bin/bash

set -e

cd "$(dirname "$0")"

IMAGE_NAME="python_podcast_llm_environment"
CONTAINER_NAME="PodcastLLMEnv"
NAME="$(id -un)"
NAME=${NAME// /}

# volumes
VOLUME_PROJECTS_DIR="${PWD}/projects/"
VOLUME_VSCODESERVER_DIR="${PWD}/temp/.vscode-server/"

# repo to clone if missing
REPO_DIR="${VOLUME_PROJECTS_DIR}/PodcastLLM"
REPO_URL="https://github.com/Botang-Liao/PodcastLLM.git"

# Port mappings (host -> container)
SSH_PORT="${SSH_PORT:-2222}"          # host -> container:22
WEB_PORT="${WEB_PORT:-11434}"         # host -> container:11434

usage_message() {
  cat <<EOF

    This script manages the docker workspace of the ITH project.

    --start     : build and enter the workspace
    --stop      : stop and remove the workspace container
    --prune     : remove the docker image
    --rebuild   : remove image & container, then build and start

    Env:
      SSH_PORT   Host port to map to container's 22 (default: 2222)
      WEB_PORT   Host port to map to container's 11434 (default: 11434)

    Examples:
      $ ./run.sh --start

EOF
}

has_gpu() {
  # Detect NVIDIA runtime availability for Docker
  docker info 2>/dev/null | grep -qE 'Runtimes:.*nvidia|nvidia-container-runtime' || \
  docker info 2>/dev/null | grep -q 'Default Runtime: nvidia'
}

start_environment() {
  [[ -d "${VOLUME_PROJECTS_DIR}" ]] || mkdir -p "${VOLUME_PROJECTS_DIR}"
  [[ -d "${VOLUME_VSCODESERVER_DIR}" ]] || mkdir -p "${VOLUME_VSCODESERVER_DIR}"

  if [[ ! -d "${REPO_DIR}" ]]; then
    git clone "${REPO_URL}" "${REPO_DIR}" || { echo "error: failed to clone PodcastLLM repo" && exit 1; }
  fi

  if [[ -z "$(docker images -q ${IMAGE_NAME})" ]]; then
    docker build \
      --build-arg UID="$(id -u)" \
      --build-arg GID="$(id -g)" \
      --build-arg NAME="${NAME}" \
      -t "${IMAGE_NAME}" . || { echo "error due to docker build image" && exit 1; }
  fi

  # If container exists but is stopped, start it
  if docker ps -a --format '{{.Names}}' | grep -qx "${CONTAINER_NAME}"; then
    if ! docker ps --format '{{.Names}}' | grep -qx "${CONTAINER_NAME}"; then
      docker start "${CONTAINER_NAME}"
    fi
  else
    if has_gpu; then
      GPU_OPTION="--gpus all"
    else
      GPU_OPTION=""
      echo "warn: no GPU runtime detected; starting without GPU (--gpus all not set)"
    fi

    docker run -d \
      ${GPU_OPTION} \
      -p "${SSH_PORT}:22" \
      -p "${WEB_PORT}:11434" \
      -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_PROJECTS_DIR}" || echo "${VOLUME_PROJECTS_DIR}")":/home/"${NAME}"/projects/ \
      -v "$([[ ${OSTYPE} == "msys" ]] && echo /"${VOLUME_VSCODESERVER_DIR}" || echo "${VOLUME_VSCODESERVER_DIR}")":/home/"${NAME}"/.vscode-server/ \
      -u "${NAME}" \
      -h "${CONTAINER_NAME}" \
      --name "${CONTAINER_NAME}" \
      "${IMAGE_NAME}" || { echo "error due to docker run image" && exit 1; }
  fi

  if [ "${OSTYPE}" == "msys" ]; then
    winpty docker exec -it "${CONTAINER_NAME}" bash
  else
    docker exec -it "${CONTAINER_NAME}" bash
  fi

  clear
}

stop_docker_container() {
  if docker ps -a --format '{{.Names}}' | grep -qx "${CONTAINER_NAME}"; then
    docker container rm -f "${CONTAINER_NAME}"
  fi
}

remove_docker_image() {
  if [[ -n "$(docker images -q ${IMAGE_NAME})" ]]; then
    docker rmi "${IMAGE_NAME}"
  fi
}

export DOCKER_SCAN_SUGGEST=false

if ! docker ps >/dev/null 2>&1; then
  echo "error: please install and start Docker Engine first!!!"
  exit 1
fi

case "${1:-}" in
  --start)   start_environment ;;
  --stop)    stop_docker_container ;;
  --prune)   stop_docker_container; remove_docker_image ;;
  --rebuild) stop_docker_container; remove_docker_image; start_environment ;;
  *)         usage_message ;;
esac
